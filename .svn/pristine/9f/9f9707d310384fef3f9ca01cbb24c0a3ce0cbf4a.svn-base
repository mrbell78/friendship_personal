package ngo.friendship.satellite.ui.product_management.fragment;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;

import androidx.cardview.widget.CardView;
import androidx.fragment.app.Fragment;

import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.PopupMenu;
import android.widget.TextView;
import android.widget.Toast;

import org.json.JSONArray;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;

import ngo.friendship.satellite.App;
import ngo.friendship.satellite.R;
import ngo.friendship.satellite.constants.ActivityDataKey;
import ngo.friendship.satellite.constants.KEY;

import ngo.friendship.satellite.databinding.FragmentProductSaleBinding;
import ngo.friendship.satellite.interfaces.OnDialogButtonClick;
import ngo.friendship.satellite.jsonoperation.JSONParser;
import ngo.friendship.satellite.model.MedicineInfo;
import ngo.friendship.satellite.ui.notification.NotificationActivity;
import ngo.friendship.satellite.ui.product_management.activity.InvoiceListActivity;
import ngo.friendship.satellite.ui.product_management.activity.MedicineSaleConfirmActivity;
import ngo.friendship.satellite.utility.AppPreference;
import ngo.friendship.satellite.utility.TextUtility;
import ngo.friendship.satellite.utility.Utility;
import ngo.friendship.satellite.views.AppToast;
import ngo.friendship.satellite.views.DialogView;


public class ProductSaleFragment extends Fragment {
FragmentProductSaleBinding binding;
    ArrayList<MedicineInfo> medicineList;
    ArrayList<MedicineInfo> soldMedicineList;
    PopupMenu popupmenu;
    public ProductSaleFragment() {
        // Required empty public constructor
    }

    public static ProductSaleFragment newInstance() {
        ProductSaleFragment fragment = new ProductSaleFragment();
        return fragment;
    }



    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        binding= FragmentProductSaleBinding.inflate(getLayoutInflater(),container,false);
        binding.toolbar.tvProductTitle.setText(getResources().getString(R.string.product_sale));
        binding.toolbar.llCard.setVisibility(View.VISIBLE);
        binding.toolbar.actionCart.setVisibility(View.VISIBLE);
        binding.toolbar.tvTotalMedicinePrice.setText("");

        medicineList = App.getContext().getDB().getCurrentMedicineStock(App.getContext().getUserInfo().getUserId(), false);
        showMedicineList();

        binding.mFilter.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                PopMenuDisplay();
            }

            public void PopMenuDisplay() {

                popupmenu = new PopupMenu(getContext(), binding.mFilter);

                popupmenu.getMenuInflater().inflate(R.menu.popup, popupmenu.getMenu());

                popupmenu.setOnMenuItemClickListener(item -> {
                    Toast.makeText(getContext(), item.getTitle(), Toast.LENGTH_LONG).show();
                    return true;
                });

                popupmenu.show();

            }
        });
        binding.toolbar.llCard.setOnClickListener(view -> {


            readDataFromView();
            if (soldMedicineList.size() == 0) {
                showOneButtonDialog(getResources().getString(R.string.empty_sold_medicine), R.drawable.error, Color.RED, "");
                return;
            }

            Intent intent = new Intent(getActivity(), MedicineSaleConfirmActivity.class);
            intent.putExtra(ActivityDataKey.DATA, soldMedicineList);
            intent.putExtra(ActivityDataKey.PARENT_NAME, this.getClass().getName());
//            intent.putExtra(ActivityDataKey.ACTIVITY_PATH, activityPath);
            startActivity(intent);
        });

        binding.toolbar.actionInvoiceList.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                PopMenuDisplay();
            }

            public void PopMenuDisplay() {

                popupmenu = new PopupMenu(getActivity(), binding.toolbar.actionInvoiceList);

                popupmenu.getMenuInflater().inflate(R.menu.invoice_popup, popupmenu.getMenu());

                popupmenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {

                    public boolean onMenuItemClick(MenuItem item) {

                        Intent dataActivity = new Intent(getActivity(), InvoiceListActivity.class);
                        startActivity(dataActivity);

                        return true;
                    }
                });

                popupmenu.show();

            }
        });
        binding.toolbar.productPageNotification.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                Intent notificationIntent = new Intent(getActivity(), NotificationActivity.class);
                startActivity(notificationIntent);
                Toast.makeText(getActivity(), "No notification", Toast.LENGTH_LONG).show();
            }
        });
        return binding.getRoot();
    }

    private void readDataFromView() {
        long timeMilisecond = Calendar.getInstance().getTimeInMillis();
        soldMedicineList = new ArrayList<MedicineInfo>();
        for (int i = 0; i < binding.llMedicineRowContainer.getChildCount(); i++) {

            View view = binding.llMedicineRowContainer.getChildAt(i);
            EditText etQty = view.findViewById(R.id.et_quantity);
            String qtyStr = etQty.getText().toString().trim();

            CardView plus = view.findViewById(R.id.increase);

            if (Utility.parseLong(qtyStr) <= 0)
                continue;

            medicineList.get(i).setSoldQuantity(Utility.parseInt(qtyStr) + "");
            medicineList.get(i).setUpdateTime(timeMilisecond);
            soldMedicineList.add(medicineList.get(i));


        }
    }

    private void showMedicineList() {


        binding.llMedicineRowContainer.removeAllViews();
        if (medicineList != null) {
            int i = 0;
            for (ngo.friendship.satellite.model.MedicineInfo medicineInfo : medicineList) {
                View view = View.inflate(getActivity(), R.layout.products_items_list, null);
                binding.llMedicineRowContainer.addView(view);
                TextView tv = view.findViewById(R.id.tv_name);
                tv.setText(medicineInfo.toString());
                tv = view.findViewById(R.id.tv_type);
                tv.setText(medicineInfo.getMedicineType());
                tv = view.findViewById(R.id.tv_info_left);
                tv.setText(TextUtility.format("%.2f", medicineInfo.getUnitSalesPrice()));
                tv = view.findViewById(R.id.tv_info_right);
                tv.setText(TextUtility.format("%d", medicineInfo.getCurrentStockQuantity()));
                TextView etQty = view.findViewById(R.id.et_quantity);
                CardView plus = view.findViewById(R.id.increase);
                CardView minus = view.findViewById(R.id.decrease);
                plus.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        String m = String.valueOf(0);
                        int qty = Integer.parseInt(etQty.getText().toString().trim());

                        m = String.valueOf(qty + 1);
                        etQty.setText(m);

                    }
                });
                minus.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        String m = String.valueOf(0);
                        int qty = Integer.parseInt(etQty.getText().toString().trim());
                        m = String.valueOf(qty - 1);
                        etQty.setText(m);
                        if (qty<=0) {
                            showOneButtonDialog(getResources().getString(R.string.empty_medicine), R.drawable.error, Color.RED, "");
                            etQty.setText("0");
                            return;
                        }

                    }
                });

                etQty.setTag(i);
                i++;


//


                etQty.addTextChangedListener(new TextWatcher() {

                    @Override
                    public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
                        // TODO Auto-generated method stub


                    }

                    @Override
                    public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
                                                  int arg3) {
                        // TODO Auto-generated method stub

                    }

                    @Override
                    public void afterTextChanged(Editable arg0) {
                        try {


                            int sellQty = Utility.parseInt(arg0.toString().trim());
                            int rowIndex = (Integer) etQty.getTag();
                            int currentStock = medicineList.get(rowIndex).getCurrentStockQuantity();
                            JSONArray configArry = new JSONArray(AppPreference.getString(getActivity(), KEY.FCM_CONFIGURATION, "[]"));
                            String val = JSONParser.getFcmConfigValue(configArry, "INVENTORY", "allow.0.inventory.product.consumption");
                            Log.e("valData", val);


                            if (!val.equalsIgnoreCase("YES")) {
                                if (sellQty > currentStock) {
                                    arg0.delete(arg0.length() - 1, arg0.length());
                                    return;
                                }
                            }

                            String totalPriceString = TextUtility.format("%s %.2f", "", getMedicineTotalPrice());
                            binding.toolbar.tvTotalMedicinePrice.setText(totalPriceString);


                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                    }


                });


            }
        }
    }
    private void showOneButtonDialog(String msg, final int imageId, int messageColor, final String type) {
        HashMap<Integer, Object> buttonMap = new HashMap<Integer, Object>();
        buttonMap.put(1, R.string.btn_close);
        DialogView exitDialog = new DialogView(getActivity(), R.string.dialog_title, msg, messageColor, imageId, buttonMap);
        exitDialog.setOnDialogButtonClick(new OnDialogButtonClick() {

            @Override
            public void onDialogButtonClick(View view) {
                if (type.equals("DATA_SEND")) {
                    getActivity().finish();
                }

            }
        });
        exitDialog.show();
    }


    private double getMedicineTotalPrice() {
        double totalPrice = 0;
        for (int i = 0; i < binding.llMedicineRowContainer.getChildCount(); i++) {

            View view = binding.llMedicineRowContainer.getChildAt(i);
            EditText etQty = view.findViewById(R.id.et_quantity);
            String qtyStr = etQty.getText().toString().trim();
            if (Utility.parseLong(qtyStr) <= 0)
                continue;

            totalPrice += medicineList.get(i).getUnitSalesPrice() * Utility.parseLong(qtyStr);
        }
        return totalPrice;

    }

}