package ngo.friendship.satellite.ui.product_management.activity;

import android.app.Dialog;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupMenu;
import android.widget.SearchView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;

import org.json.JSONArray;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;

import ngo.friendship.satellite.App;
import ngo.friendship.satellite.R;
import ngo.friendship.satellite.base.BaseActivity;
import ngo.friendship.satellite.constants.ActivityDataKey;
import ngo.friendship.satellite.constants.KEY;
import ngo.friendship.satellite.databinding.ActivityProductAdjustmentBinding;
import ngo.friendship.satellite.interfaces.OnDialogButtonClick;
import ngo.friendship.satellite.jsonoperation.JSONParser;
import ngo.friendship.satellite.model.MedicineInfo;
import ngo.friendship.satellite.ui.notification.NotificationActivity;
import ngo.friendship.satellite.ui.product_management.adapter.ProductItemsAdapter_test;
import ngo.friendship.satellite.utility.AppPreference;
import ngo.friendship.satellite.utility.TextUtility;
import ngo.friendship.satellite.utility.Utility;
import ngo.friendship.satellite.views.AppButton;
import ngo.friendship.satellite.views.DialogView;

public class ProductAdjustmentActivity extends BaseActivity implements View.OnClickListener {
    ActivityProductAdjustmentBinding binding;
    private ProductItemsAdapter_test adapter;
    ArrayList<ngo.friendship.satellite.model.MedicineInfo> medicineList;
    ArrayList<ngo.friendship.satellite.model.MedicineInfo> soldMedicineList;
    Dialog dialog;
    LinearLayout llRowContainer;
    PopupMenu popupmenu;
    private Toolbar toolbar;
    LinearLayout cartAmountProfit;
    public TextView cancelButton, action_amount;
    ImageView actionInvoiceList, product_page_notification, bookmark;
    AppButton btn_back;
    String activityPath;
    TextView medicine_name;
    TextView mPrice, mAmount;
    TextView mStock;
    EditText mValue;
    private CardView plus, plus2, minus;
    ProductItemsAdapter_test.OnPlusListener onPlusListener;
    ProductItemsAdapter_test.OnMinusListener onMinusListener;

    int minteger = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityProductAdjustmentBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        dialog = new Dialog(this);
        action_amount = findViewById(R.id.action_amount);
        bookmark = findViewById(R.id.medicine_bookmark);
        plus = findViewById(R.id.increase);
        plus2 = findViewById(R.id.increaseBlue);
        minus = findViewById(R.id.decrease);


        cartAmountProfit = findViewById(R.id.btn_sell_medicine);
        cartAmountProfit.setOnClickListener(view -> {

            readDataFromView();
            if (soldMedicineList.size() == 0) {
                showOneButtonDialog(getResources().getString(R.string.empty_sold_medicine), R.drawable.error, Color.RED, "");
                return;
            }

            Intent intent = new Intent(this, AdjustConfirmActivity.class);
            intent.putExtra(ActivityDataKey.DATA, soldMedicineList);
            intent.putExtra(ActivityDataKey.PARENT_NAME, this.getClass().getName());
            intent.putExtra(ActivityDataKey.ACTIVITY_PATH, activityPath);
            startActivity(intent);
            finish();
        });

        actionInvoiceList = findViewById(R.id.ivSetting);
        btn_back = findViewById(R.id.btn_back);
        btn_back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
               onBackPressed();
            }
        });
        actionInvoiceList.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                PopMenuDisplay();
            }

            public void PopMenuDisplay() {

                popupmenu = new PopupMenu(ProductAdjustmentActivity.this, actionInvoiceList);

                popupmenu.getMenuInflater().inflate(R.menu.invoice_popup, popupmenu.getMenu());

                popupmenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {

                    public boolean onMenuItemClick(MenuItem item) {

                        Intent dataActivity = new Intent(ProductAdjustmentActivity.this, InvoiceListActivity.class);
                        startActivity(dataActivity);

                        return true;
                    }
                });

                popupmenu.show();

            }
        });

        product_page_notification = findViewById(R.id.product_page_notification);
        product_page_notification.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                Intent notificationIntent = new Intent(ProductAdjustmentActivity.this, NotificationActivity.class);
                startActivity(notificationIntent);
                Toast.makeText(ProductAdjustmentActivity.this, "No notification", Toast.LENGTH_LONG).show();
            }
        });


        medicineList = App.getContext().getDB().getCurrentMedicineStock(App.getContext().getUserInfo().getUserId(), false);
        llRowContainer = findViewById(R.id.ll_medicine_row_container);

        showMedicineList();

//        setUpRecyclerView();
        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                adapter.getFilter().filter(newText);
                return false;
            }
        });

        binding.mFilter.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                PopMenuDisplay();
            }

            public void PopMenuDisplay() {

                popupmenu = new PopupMenu(ProductAdjustmentActivity.this, binding.mFilter);

                popupmenu.getMenuInflater().inflate(R.menu.popup, popupmenu.getMenu());

                popupmenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {

                    public boolean onMenuItemClick(MenuItem item) {

                        Toast.makeText(ProductAdjustmentActivity.this, item.getTitle(), Toast.LENGTH_LONG).show();

                        return true;
                    }
                });

                popupmenu.show();

            }
        });


        //..................................................................


    }




    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.my_product_menu, menu);
        return true;
    }

//
//    @Override
//    public boolean onOptionsItemSelected(MenuItem item) {
//        int id = item.getItemId();
//
//        if (id == android.R.id.home) {
//            onBackPressed();
//            return true;
//        } else if (id == R.id.nav_product_rise) {
//            // finish the activity
//
//            startActivity(new Intent(this, RiseListActivity.class));
//            return true;
//        } else if (id == R.id.nav_product_adjust) {
//            startActivity(new Intent(this, ProductAdjustmentActivity.class));
//            return true;
//        } else if (id == R.id.all_invoice) {
//            startActivity(new Intent(this, InvoiceListActivity.class));
//            return true;
//        }
//
//
//        return super.onOptionsItemSelected(item);
//    }

    private void showMedicineList() {
        final TextView tvMedicineTotalPrice = findViewById(R.id.tv_total_medicine_price);
        tvMedicineTotalPrice.setText("");

        llRowContainer.removeAllViews();
        if (medicineList != null) {
            int i = 0;
            for (ngo.friendship.satellite.model.MedicineInfo medicineInfo : medicineList) {
                View view = View.inflate(this, R.layout.adjustment_products_items_list, null);
                llRowContainer.addView(view);


                TextView tv = view.findViewById(R.id.tv_name);
                tv.setText(medicineInfo.toString());

                tv = view.findViewById(R.id.tv_type);
                tv.setText(medicineInfo.getMedicineType());

                tv = view.findViewById(R.id.tv_info_left);
                tv.setText(TextUtility.format("%.2f", medicineInfo.getUnitSalesPrice()));

                tv = view.findViewById(R.id.tv_info_right);
                tv.setText(TextUtility.format("%d", medicineInfo.getCurrentStockQuantity()));


                TextView etQty = view.findViewById(R.id.et_quantity);
                CardView plus = view.findViewById(R.id.increase);
                CardView minus = view.findViewById(R.id.decrease);
                CardView plus2 = findViewById(R.id.increaseBlue);

                plus.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        String m = String.valueOf(0);
                        int qty = Integer.parseInt(etQty.getText().toString().trim());

                        m = String.valueOf(qty + 1);
                        etQty.setText(m);

                    }
                });
                minus.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        String m = String.valueOf(0);
                        int qty = Integer.parseInt(etQty.getText().toString().trim());
                        m = String.valueOf(qty - 1);
                        etQty.setText(m);
                        if (qty <= 0) {
                            showOneButtonDialog(getResources().getString(R.string.empty_medicine), R.drawable.error, Color.RED, "");
                            return;
                        }

                    }
                });
                etQty.setTag(i);
                i++;


                plus.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
//                            int p = Integer.parseInt(etQty.getText().toString());
                        minteger = minteger + 1;
                        etQty.setText(minteger);
//
                        Toast.makeText(ProductAdjustmentActivity.this, "p", Toast.LENGTH_SHORT).show();
//                        increaseNumber();


                    }
                });


                etQty.addTextChangedListener(new TextWatcher() {

                    @Override
                    public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
                        // TODO Auto-generated method stub


                    }

                    @Override
                    public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
                                                  int arg3) {
                        // TODO Auto-generated method stub

                    }

                    @Override
                    public void afterTextChanged(Editable arg0) {
                        try {


                            int sellQty = Utility.parseInt(arg0.toString().trim());
                            int rowIndex = (Integer) etQty.getTag();
                            int currentStock = medicineList.get(rowIndex).getCurrentStockQuantity();
                            JSONArray configArry = new JSONArray(AppPreference.getString(ProductAdjustmentActivity.this, KEY.FCM_CONFIGURATION, "[]"));
                            String val = JSONParser.getFcmConfigValue(configArry, "INVENTORY", "allow.0.inventory.product.consumption");
                            Log.e("valData", val);


                            if (!val.equalsIgnoreCase("YES")) {
                                if (sellQty > currentStock) {
                                    arg0.delete(arg0.length() - 1, arg0.length());
                                    return;
                                }
                            }

                            String totalPriceString = TextUtility.format("%s %.2f", "", getMedicineTotalPrice());
                            tvMedicineTotalPrice.setText(totalPriceString);

                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                    }


                });


            }
        }
    }

//    private void increaseNumber() {
//        minteger = minteger + 1;
//        display(minteger);
//
//    }
//
//    private void display(int number) {
//        p.setText("" + number);
//    }


    private double getMedicineTotalPrice() {
        double totalPrice = 0;
        for (int i = 0; i < llRowContainer.getChildCount(); i++) {

            View view = llRowContainer.getChildAt(i);
            EditText etQty = view.findViewById(R.id.et_quantity);
            String qtyStr = etQty.getText().toString().trim();
            if (Utility.parseLong(qtyStr) <= 0)
                continue;

            totalPrice += medicineList.get(i).getUnitSalesPrice() * Utility.parseLong(qtyStr);
        }
        return totalPrice;

    }


//    private void increaseInteger() {
//        minteger = minteger + 1;
////        display(minteger);
//        plus2.setVisibility(View.VISIBLE);
//        plus.setVisibility(View.GONE);
//
//        int medicinePrice = Integer.parseInt(mPrice.getText().toString());
//        int medicineItems = Integer.parseInt(mValue.getText().toString());
//
//
//        int result = (int) (medicinePrice * medicineItems);
//        mAmount.setText(String.valueOf(result));
////        exampleList.get(getPosition()).setResult(String.valueOf(result));
////
////        increaseTotalAmount();
////        stockDecrease();
//
//    }


    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.btn_close:
                this.finish();
                break;

//            case R.id.increase:
//                Toast.makeText(this, "jhggfdgr", Toast.LENGTH_SHORT).show();
//                break;

            case R.id.btn_sell_medicine:
                readDataFromView();
                if (soldMedicineList.size() == 0) {
                    showOneButtonDialog(getResources().getString(R.string.empty_sold_medicine), R.drawable.error, Color.RED, "");
                    return;
                }

                Intent intent = new Intent(this, MedicineSaleConfirmActivity.class);
                intent.putExtra(ActivityDataKey.DATA, soldMedicineList);
                intent.putExtra(ActivityDataKey.PARENT_NAME, this.getClass().getName());
                intent.putExtra(ActivityDataKey.ACTIVITY_PATH, activityPath);
                startActivity(intent);
                finish();

                break;
            default:
                break;
        }

    }


    private void showOneButtonDialog(String msg, final int imageId, int messageColor, final String type) {
        HashMap<Integer, Object> buttonMap = new HashMap<Integer, Object>();
        buttonMap.put(1, R.string.btn_close);
        DialogView exitDialog = new DialogView(this, R.string.dialog_title, msg, messageColor, imageId, buttonMap);
        exitDialog.setOnDialogButtonClick(new OnDialogButtonClick() {

            @Override
            public void onDialogButtonClick(View view) {
                if (type.equals("DATA_SEND")) {
                    ProductAdjustmentActivity.this.finish();
                }

            }
        });
        exitDialog.show();
    }

    private void readDataFromView() {
        long timeMilisecond = Calendar.getInstance().getTimeInMillis();
        soldMedicineList = new ArrayList<MedicineInfo>();
        for (int i = 0; i < llRowContainer.getChildCount(); i++) {

            View view = llRowContainer.getChildAt(i);
            EditText etQty = view.findViewById(R.id.et_quantity);
            String qtyStr = etQty.getText().toString().trim();
            if (Utility.parseLong(qtyStr) <= 0)
                continue;

            medicineList.get(i).setSoldQuantity(Utility.parseInt(qtyStr) + "");
            medicineList.get(i).setUpdateTime(timeMilisecond);
            soldMedicineList.add(medicineList.get(i));


        }
    }

//    private void setUpRecyclerView() {
//        RecyclerView recyclerView = findViewById(R.id.recycler_view);
//        recyclerView.setHasFixedSize(true);
//        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
//        adapter = new ProductItemsAdapter_test(medicineList, this, this, this);
//        recyclerView.setLayoutManager(layoutManager);
//        recyclerView.setAdapter(adapter);
//
//    }

//    @Override
//    public void onPlusClick(int position, View v) {
//        int count = medicineList.get(position).getCount() + 1;
//        medicineList.get(position).setCount(count);
//        int stock = Integer.parseInt(medicineList.get(position).getmMedicine_stock()) - 1;
//        medicineList.get(position).setmMedicine_stock(String.valueOf(stock));
//        float result = (medicineList.get(position).getCount() * Float.parseFloat(medicineList.get(position).getmMedicine_price()));
//        medicineList.get(position).setResult(String.valueOf(result));
//        adapter.notifyDataSetChanged();
//        totalAmount();
//
//    }
//
//
//    @Override
//    public void onMinusClick(int position, View v) {
//        int count = medicineList.get(position).getCount() - 1;
//        medicineList.get(position).setCount(count);
//        int stock = Integer.parseInt(medicineList.get(position).getmMedicine_stock()) + 1;
//        medicineList.get(position).setmMedicine_stock(String.valueOf(stock));
//        float result = (medicineList.get(position).getCount() * Float.parseFloat(medicineList.get(position).getmMedicine_price()));
//        medicineList.get(position).setResult(String.valueOf(result));
//        adapter.notifyDataSetChanged();
//        totalAmount();
//    }
//
//
//    private void totalAmount() {
//        int total = 0;
//        for (MedicineInfo item : medicineList) {
//            total += Float.parseFloat(item.getResult());
//        }
//        action_amount.setText(String.valueOf(total + ".00"));
//
//    }
}