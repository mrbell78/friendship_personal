package ngo.friendship.satellite.ui;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.DividerItemDecoration;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.LinearLayoutManager;

import android.content.Context;
import android.content.Intent;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.InsetDrawable;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;

import com.google.gson.Gson;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import ngo.friendship.satellite.App;
import ngo.friendship.satellite.LanguageContextWrapper;
import ngo.friendship.satellite.R;
import ngo.friendship.satellite.adapter.BasemHealthAdapter;
import ngo.friendship.satellite.base.BaseActivity;
import ngo.friendship.satellite.constants.ActivityDataKey;
import ngo.friendship.satellite.constants.KEY;
import ngo.friendship.satellite.databinding.ActivityQuestionnaireListBinding;
import ngo.friendship.satellite.databinding.ServiceQuestionnaireItemGridRowBinding;
import ngo.friendship.satellite.databinding.ServiceQuestionnaireItemListRowBinding;
import ngo.friendship.satellite.databinding.ServiceQuestionnaireItemRowBinding;
import ngo.friendship.satellite.error.MhealthException;
import ngo.friendship.satellite.model.AppSettings;
import ngo.friendship.satellite.model.Beneficiary;
import ngo.friendship.satellite.model.Household;
import ngo.friendship.satellite.model.QuestionnaireInfo;
import ngo.friendship.satellite.model.QuestionnaireList;
import ngo.friendship.satellite.ui.reports.ReportListActivity;
import ngo.friendship.satellite.utility.AppPreference;
import ngo.friendship.satellite.utility.ItemDecorationAlbumColums;
import ngo.friendship.satellite.utility.Utility;
import ngo.friendship.satellite.views.DialogView;

public class QuestionnaireListActivity extends BaseActivity {
    int categoryId;
    String categoryName;
    String categoryCaption;
    ArrayList<QuestionnaireInfo> questionnaireList;
    String activityPath;
    ArrayList<String> entryPrams;
    ArrayList<Beneficiary> beneficiaryList;
    ActivityQuestionnaireListBinding binding;
    BasemHealthAdapter<QuestionnaireInfo, ServiceQuestionnaireItemListRowBinding> mAdapterList;
    BasemHealthAdapter<QuestionnaireInfo, ServiceQuestionnaireItemGridRowBinding> mAdapterGrid;
    int[] colors_500;
    Random colorGenerator = new Random();
    Beneficiary beneficiary;
    int serviceViewType = 1;
    private MenuItem actionGridView, actionListView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityQuestionnaireListBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        App.loadApplicationData(this);
        Bundle b = getIntent().getExtras();
        // Get category id
        App.getContext().readUserInfo(QuestionnaireListActivity.this);
        categoryId = b.getInt(ActivityDataKey.QUESTIONNAIRE_CATEGORY_ID);
        categoryName = b.getString(ActivityDataKey.QUESTIONNAIRE_CATEGORY_NAME);
        categoryCaption = b.getString(ActivityDataKey.QUESTIONNAIRE_CATEGORY_CAPTION);

        if (getIntent().getStringExtra("BENEF_PROFILE") != null && getIntent().getStringExtra("BENEF_PROFILE") != "") {
            String benefProfile = getIntent().getStringExtra("BENEF_PROFILE");
            beneficiary = new Gson().fromJson(benefProfile, Beneficiary.class);
            setTitle(getResources().getString(R.string.service_list)+" ("+beneficiary.getBenefName()+" -"+beneficiary.getBenefCode()+")");
        }else{
            setTitle(getResources().getString(R.string.service_list));
        }

        entryPrams = new ArrayList<String>();
//        setTitle("" + categoryCaption);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        }
        serviceViewType = AppPreference.getInt(QuestionnaireListActivity.this, KEY.SERVICE_VIEW_MODE, 1);
        if (serviceViewType == 1) {
            getItemAdapterList();
        } else if (serviceViewType == 2) {
            getItemAdapterGrid();
        }



    }


    private void getItemAdapterList() {
        mAdapterList = new BasemHealthAdapter<>() {
            @Override
            public void onItemLongClick(@NonNull View view, QuestionnaireInfo model, int position) {

            }

            @Override
            public void onItemClick(@NonNull View view, QuestionnaireInfo questionnaireInfo, int position, ServiceQuestionnaireItemListRowBinding dataBinding) {
                openQuestionnair(position);
            }

            @Override
            public void onBindData(QuestionnaireInfo model, int position, ServiceQuestionnaireItemListRowBinding dataBinding) {

                // dataBinding.tvQuestionnaireIcon.setIcon("" + model.getIcon());
                dataBinding.tvQuestionnaireIcon.setText("");
                dataBinding.tvQuestionnaireTitle.setText("" + model.getQuestionnaireTitle());
            }

            @Override

            public int getLayoutResId() {
                return R.layout.service_questionnaire_item_list_row;
            }
        };

//        try {
//            showQuestionnaire(getQuestionnaireList(categoryId, App.getContext().getAppSettings().getLanguage()));
        questionnaireList = App.getContext().getDB().getQuestionnaireList(-1, App.getContext().getAppSettings().getLanguage());

        mAdapterList.addItems(questionnaireList);

//        int[] ATTRS = new int[]{android.R.attr.listDivider};
//        TypedArray a = obtainStyledAttributes(ATTRS);
//        Drawable divider = a.getDrawable(0);
//        InsetDrawable insetDivider = new InsetDrawable(divider, 16, 0, 16, 0);
//        a.recycle();
//        DividerItemDecoration itemDecoration = new DividerItemDecoration(this, DividerItemDecoration.VERTICAL);
//        itemDecoration.setDrawable(insetDivider);
//        binding.rvQuestionnaire.addItemDecoration(itemDecoration);

        binding.rvQuestionnaire.addItemDecoration(new ItemDecorationAlbumColums(QuestionnaireListActivity.this, LinearLayoutManager.HORIZONTAL));
        binding.rvQuestionnaire.removeItemDecoration(new ItemDecorationAlbumColums(QuestionnaireListActivity.this, LinearLayoutManager.VERTICAL));

        binding.rvQuestionnaire.setHasFixedSize(true);
        LinearLayoutManager mLayoutManager = new LinearLayoutManager(this);

        binding.rvQuestionnaire.setLayoutManager(mLayoutManager);
        binding.rvQuestionnaire.setItemAnimator(new DefaultItemAnimator());

        binding.rvQuestionnaire.setAdapter(mAdapterList);
//        } catch (MhealthException e) {
//            e.printStackTrace();
//        }
    }

    private void getItemAdapterGrid() {
        mAdapterGrid = new BasemHealthAdapter<>() {
            @Override
            public void onItemLongClick(@NonNull View view, QuestionnaireInfo model, int position) {

            }

            @Override
            public void onItemClick(@NonNull View view, QuestionnaireInfo questionnaireInfo, int position, ServiceQuestionnaireItemGridRowBinding dataBinding) {
                openQuestionnair(position);
            }

            @Override
            public void onBindData(QuestionnaireInfo model, int position, ServiceQuestionnaireItemGridRowBinding dataBinding) {

                // dataBinding.tvQuestionnaireIcon.setIcon("" + model.getIcon());
                dataBinding.tvQuestionnaireIcon.setText("");
                dataBinding.tvQuestionnaireTitle.setText("" + model.getQuestionnaireTitle());
            }

            @Override

            public int getLayoutResId() {
                return R.layout.service_questionnaire_item_grid_row;
            }
        };

//        try {
//            showQuestionnaire(getQuestionnaireList(categoryId, App.getContext().getAppSettings().getLanguage()));
        questionnaireList = App.getContext().getDB().getQuestionnaireList(-1, App.getContext().getAppSettings().getLanguage());

        mAdapterGrid.addItems(questionnaireList);

//        int[] ATTRS = new int[]{android.R.attr.listDivider};
//        TypedArray a = obtainStyledAttributes(ATTRS);
//        Drawable divider = a.getDrawable(0);
//        InsetDrawable insetDivider = new InsetDrawable(divider, 16, 0, 16, 0);
//        a.recycle();
//        DividerItemDecoration itemDecoration = new DividerItemDecoration(this, DividerItemDecoration.VERTICAL);
//        itemDecoration.setDrawable(insetDivider);
//        binding.rvQuestionnaire.addItemDecoration(itemDecoration);

        binding.rvQuestionnaire.removeItemDecoration(new ItemDecorationAlbumColums(QuestionnaireListActivity.this, LinearLayoutManager.HORIZONTAL));
        binding.rvQuestionnaire.setHasFixedSize(true);
        LinearLayoutManager    mLayoutManager = new GridLayoutManager(this, 2);
        binding.rvQuestionnaire.setLayoutManager(mLayoutManager);
        binding.rvQuestionnaire.setItemAnimator(new DefaultItemAnimator());

        binding.rvQuestionnaire.setAdapter(mAdapterGrid);
        binding.rvQuestionnaire.addItemDecoration(new ItemDecorationAlbumColums(QuestionnaireListActivity.this, LinearLayoutManager.HORIZONTAL));
//        binding.rvQuestionnaire.addItemDecoration(new ItemDecorationAlbumColums(QuestionnaireListActivity.this, LinearLayoutManager.VERTICAL));
//        } catch (MhealthException e) {
//            e.printStackTrace();
//        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.question_menu, menu);
        actionGridView = menu.findItem(R.id.action_grid_view);
        actionListView = menu.findItem(R.id.action_list_view);
        if (serviceViewType == 1) {
            actionGridView.setVisible(false);
            actionListView.setVisible(true);
        } else if (serviceViewType == 2) {
            actionGridView.setVisible(true);
            actionListView.setVisible(false);
        }
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                return true;

            case R.id.action_list_view:


                actionGridView.setVisible(true);
                actionListView.setVisible(false);
                serviceViewType = 2;
                getItemAdapterGrid();
                AppPreference.putInt(this, KEY.SERVICE_VIEW_MODE, 2);
                return true;
            case R.id.action_grid_view:

                actionGridView.setVisible(false);
                actionListView.setVisible(true);
                serviceViewType = 1;
                getItemAdapterList();
                AppPreference.putInt(this, KEY.SERVICE_VIEW_MODE, 1);

                return true;

            default:
                break;
        }
        return super.onOptionsItemSelected(item);
    }


    public QuestionnaireList getQuestionnaireList(int categoryId, String langCode) throws MhealthException {

        ArrayList<QuestionnaireInfo> questionnaireList = App.getContext().getDB().getQuestionnaireList(categoryId, langCode);
        QuestionnaireList allQuestionnaire = new QuestionnaireList();
        allQuestionnaire.setErrorCode(1);
        allQuestionnaire.setAllQuestionnaire(questionnaireList);
        return allQuestionnaire;
    }

    private void openQuestionnair(final int p) {
        if (questionnaireList.get(p).getPromptForBeneficiary() == 0) {
            boolean isGust = Boolean.parseBoolean(Utility.getFcmConfigurationValue(this, "default_beneficiary", "is.default.beneficiary.guest", "true"));
            String defultBenefCode = Utility.getFcmConfigurationValue(this, "default_beneficiary", "default.beneficiary.code", "00000");
            startInterview(questionnaireList.get(p), defultBenefCode, isGust);
        } else {
            String defultBenefCode = Utility.getFcmConfigurationValue(this, "default_beneficiary", "default.beneficiary.code", "00000");

            String houseHoldNumber = beneficiary.getBenefCode().substring(0, 3);
            ;
            entryPrams.add(houseHoldNumber);

            startInterview(questionnaireList.get(p), defultBenefCode, false);

//                boolean isAutoSelfCreateHouseHold = Boolean.parseBoolean(Utility.getFcmConfigurationValue(this, "default_beneficiary", "auto.sequence.and.self.create.hh", "false"));
//                if (isAutoSelfCreateHouseHold) {
//                    entryPrams = new ArrayList<>();
//                    if (questionnaireList.getAllQuestionnaire().get(p).getQuestionnaireName().equals(QuestionnaireName.BENEFICIARY_REGISTRATION)) {
//                        String houseHoldNumber = TextUtility.format("%03d", App.getContext().getDB().getLastHouseHoldNumberWithIncrement());
//                        if (houseHoldNumber.length() > 3) {
//                            AppToast.showToastWarnaing(QuestionnaireListActivity.this, " Maximum beneficiary limit over !!");
//                        } else {
//                            entryPrams.add(houseHoldNumber);
//                            entryPrams.add(App.getContext().getUserInfo().getUserCode() + houseHoldNumber);
//                            startAutoHouseHoldWithBeneficiaryRegInterview(questionnaireList.getAllQuestionnaire().get(p), null, false);
//                        }
//                    } else {
//                        ArrayList<Household> householdArrayList = App.getContext().getDB().getHouseholdListAutoSelected();
//                        showHouseHoldNumberInputDialogWithSelfCreateHousehold(householdArrayList, "", p);
//                    }
//
//
//                } else {
//                    showHouseHoldNumberInputDialogFormHealth(p);
//                }
        }
    }

    private void startInterview(QuestionnaireInfo questionnaireInfo, String benefCode, boolean isGust) {
        entryPrams.add(beneficiary.getBenefCodeFull());
        Intent intent = new Intent(this, InterviewActivity.class);
        intent.putExtra(ActivityDataKey.QUESTIONNAIRE_JSON, questionnaireInfo.getQuestionnaireJSON(this));
        intent.putExtra(ActivityDataKey.ACTIVITY_PATH, getIntent().getExtras().getString(ActivityDataKey.QUESTIONNAIRE_CATEGORY_CAPTION));
        intent.putExtra(ActivityDataKey.QUESTIONNAIRE_TITLE, questionnaireInfo.getQuestionnaireTitle());
        intent.putExtra(ActivityDataKey.QUESTIONNAIRE_ID, questionnaireInfo.getId());
        intent.putExtra(ActivityDataKey.QUESTIONNAIRE_NAME, questionnaireInfo.getQuestionnaireName());
        intent.putExtra(ActivityDataKey.BENEFICIARY_CODE, beneficiary.getBenefCodeFull());
        intent.putExtra(ActivityDataKey.BENEFICIARY_ID, beneficiary.getBenefId());
        intent.putExtra(ActivityDataKey.PARAMS, entryPrams);
        intent.putExtra(ActivityDataKey.IS_GUST, isGust);
        intent.putExtra(ActivityDataKey.INTERVIEW_TYPE, ActivityDataKey.NEW);
        intent.putExtra(ActivityDataKey.SINGLE_PG_FROM_VIEW, questionnaireInfo.getIsSinglePgFormView());
        intent.putExtra("EDIT_HOUSEHOLD", true);
        startActivity(intent);
    }

    private void startAutoHouseHoldWithBeneficiaryRegInterview(QuestionnaireInfo questionnaireInfo, String benefCode, boolean isGust) {
        Intent intent = new Intent(this, InterviewActivity.class);
        intent.putExtra(ActivityDataKey.QUESTIONNAIRE_JSON, questionnaireInfo.getQuestionnaireJSON(this));
        intent.putExtra(ActivityDataKey.ACTIVITY_PATH, getIntent().getExtras().getString(ActivityDataKey.QUESTIONNAIRE_CATEGORY_CAPTION));
        intent.putExtra(ActivityDataKey.QUESTIONNAIRE_TITLE, questionnaireInfo.getQuestionnaireTitle());
        intent.putExtra(ActivityDataKey.QUESTIONNAIRE_ID, questionnaireInfo.getId());
        intent.putExtra(ActivityDataKey.QUESTIONNAIRE_NAME, questionnaireInfo.getQuestionnaireName());
        intent.putExtra(ActivityDataKey.BENEFICIARY_CODE, benefCode);
        intent.putExtra(ActivityDataKey.PARAMS, entryPrams);
        intent.putExtra(ActivityDataKey.IS_GUST, isGust);
        intent.putExtra(ActivityDataKey.INTERVIEW_TYPE, ActivityDataKey.NEW);
        intent.putExtra(ActivityDataKey.NEW_HOUSEHOLD_BENEFICIARY_REG, "HOUSEHOLD_BENEFICIARY_REG");
        intent.putExtra(ActivityDataKey.SINGLE_PG_FROM_VIEW, questionnaireInfo.getIsSinglePgFormView());
        startActivity(intent);
    }

    public void showHouseHoldNumberInputDialogWithSelfCreateHousehold(ArrayList<Household> householdArrayList, String questionType, int questionPosition) {
        HashMap<Integer, Object> buttonMap = new HashMap<Integer, Object>();
//        buttonMap.put(1, R.string.btn_enter);
        buttonMap.put(1, R.string.btn_cancel);
        DialogView exitDialog = new DialogView(this, buttonMap);
        entryPrams = new ArrayList<String>();
        exitDialog.showHouseholdNumberInputDialogWithSelfCreateHousehold(QuestionnaireListActivity.this, householdArrayList, questionType, questionPosition);

    }


}