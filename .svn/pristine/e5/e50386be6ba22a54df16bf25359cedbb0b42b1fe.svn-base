package ngo.friendship.satellite.ui;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

import java.util.HashMap;

import dagger.hilt.android.AndroidEntryPoint;
import ngo.friendship.satellite.App;
import ngo.friendship.satellite.LanguageContextWrapper;
import ngo.friendship.satellite.R;
import ngo.friendship.satellite.constants.KEY;
import ngo.friendship.satellite.interfaces.OnDialogButtonClick;
import ngo.friendship.satellite.model.AppSettings;
import ngo.friendship.satellite.model.UserInfo;
import ngo.friendship.satellite.ui.login.LoginPinActivity;
import ngo.friendship.satellite.utility.AppPreference;
import ngo.friendship.satellite.utility.SystemUtility;
import ngo.friendship.satellite.views.AppToast;
import ngo.friendship.satellite.views.DialogView;


public class LauncherActivity extends AppCompatActivity {
    ImageView imageView;
    private static final int REQUEST = 112;
    boolean isSuccessful;
    int redirectPageValue = 0;
    String isSplashTextShowValue = null;
    String[] permissions = new String[]{
            "android.permission.CAMERA",
            "android.permission.RECORD_AUDIO",
            "android.permission.SEND_SMS",
            "android.permission.ACCESS_FINE_LOCATION",
            "android.permission.ACCESS_COARSE_LOCATION",
            "android.permission.READ_PHONE_STATE",
            "android.permission.CALL_PHONE"
    };

//            "android.permission.WRITE_EXTERNAL_STORAGE",
//                    "android.permission.READ_EXTERNAL_STORAGE",

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_launcher);
        imageView = findViewById(R.id.iv_fcm_pic);


//        if(App.getContext().isExtSDCardPresent()){
//            App.loadApplicationData(this);
//            String imgPath=App.getContext().getCommonDir(this)+ File.separator+ App.getContext().getUserInfo().getLoginImagePathMobileDir();
//            if(FileOperaion.isExist(imgPath))
//            {
//                imageView.setImageBitmap(FileOperaion.decodeImageFile(imgPath, 100));
//            }
//        }
    }


    private static boolean hasPermissions(Activity context, String... permissions) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context != null && permissions != null) {
            for (String permission : permissions) {
                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {
                    return false;
                }
            }
        }
        return true;
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case REQUEST:
                compareUserPermission(permissions, grantResults);
                break;
        }
    }

    private void compareUserPermission(String[] permissions, @NonNull int[] grantResults) {
        boolean isGrantAll = true;
        for (int i = 0; i < permissions.length; i++) {
            if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {
                isGrantAll = false;
            }
        }

        if (isGrantAll) {

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                if (!Environment.isExternalStorageManager()) {
                    try {
                        Intent intent = new Intent();
                        intent.setAction(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
                        Uri uri = Uri.fromParts("package", this.getPackageName(), null);
                        intent.setData(uri);
                        startActivity(intent);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    checkSDCard();
                }

            } else {
                checkSDCard();
            }


        } else {
            if (!hasPermissions(LauncherActivity.this, permissions)) {
                ActivityCompat.requestPermissions(this, permissions, REQUEST);
            }
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        App.getContext().readAppSettings(this);
//        if (App.getContext().getAppSettings() == null) {
//            App.getContext().readAppSettings(this);
//        }

        if (!SystemUtility.isAutoTimeEnabled(this)) {
            SystemUtility.openDateTimeSettingsActivity(this);
        }

        animation();
    }


    private void checkSDCardAndPermission() {
        if (Build.VERSION.SDK_INT >= 23) {
            if (!hasPermissions(this, permissions)) {
                ActivityCompat.requestPermissions(this, permissions, REQUEST);
            } else {
                checkSDCard();
            }
        } else {
            checkSDCard();
        }
    }


    private void checkSDCard() {
        try {
            Log.e("SD CARD", "CALLED");
            if (App.getContext().isExtSDCardPresent()) {
                isSuccessful = App.loadApplicationData(LauncherActivity.this);
                App.getContext().copyAlgorithImageFromDrawable(this);

                //            if (!isSuccessful) {
//                AppToast.showToast(LauncherActivity.this, Integer.valueOf(R.string.sdcard_not_present));
//                LauncherActivity.this.finish();
//            } else if (App.getContext().getUserInfo().isActive()) {
//                LauncherActivity.this.startActivity(new Intent(LauncherActivity.this, LoginPinActivity.class));
//                LauncherActivity.this.finish();
//            } else {
//                LauncherActivity.this.startActivity(new Intent(LauncherActivity.this, LoginActivity.class));
//                LauncherActivity.this.finish();
//            }

                if (!isSuccessful) {
                    AppToast.showToast(LauncherActivity.this, Integer.valueOf(R.string.sdcard_not_present));
                    LauncherActivity.this.finish();
                } else {
                    isSplashTextShowValue = App.getContext().getAppSettings().getIsSplashTextShow();
                    UserInfo data = App.getContext().getUserInfo();
                    boolean active = App.getContext().getUserInfo().isActive();
                    if (App.getContext().getUserInfo().isActive() && isSplashTextShowValue.equals("YES")) {
                        redirectPageValue = 1;
                        Intent intent = new Intent(LauncherActivity.this, CautionActivity.class);
                        intent.putExtra("valueToRedirect", redirectPageValue);
                        startActivity(intent);
                        LauncherActivity.this.finish();
                    }
                    if (!App.getContext().getUserInfo().isActive() && isSplashTextShowValue.equals("YES")) {
                        redirectPageValue = 1;
                        Intent intent = new Intent(LauncherActivity.this, CautionActivity.class);
                        intent.putExtra("valueToRedirect", redirectPageValue);
                        startActivity(intent);
                        LauncherActivity.this.finish();
                    }
                    if (!App.getContext().getUserInfo().isActive() && isSplashTextShowValue.equals("NO")) {
                        LauncherActivity.this.startActivity(new Intent(LauncherActivity.this, LoginActivity.class));
                        LauncherActivity.this.finish();
                    }
                    if (App.getContext().getUserInfo().isActive() && isSplashTextShowValue.equals("NO")) {
                        LauncherActivity.this.startActivity(new Intent(LauncherActivity.this, LoginPinActivity.class));
                        LauncherActivity.this.finish();
                    }
                }

            } else {
                AppToast.showToast(this, Integer.valueOf(R.string.sdcard_not_present));
                finish();
            }
        } catch (Exception e) {
            dialogData();
            e.printStackTrace();
        }

    }

    public void animation() {

        try {
            Log.e("ANIMATION", "CALLED");
            Animation animation = AnimationUtils.loadAnimation(LauncherActivity.this, R.anim.scaleup);
            imageView.setAnimation(animation);

            animation.setAnimationListener(new Animation.AnimationListener() {
                @Override
                public void onAnimationStart(Animation animation) {
                    Log.e("ANIMATION", "STARTED");
                }

                @Override
                public void onAnimationEnd(Animation animation) {
                    Log.e("ANIMATION", "ENDED");
                    checkSDCardAndPermission();
                }

                @Override
                public void onAnimationRepeat(Animation animation) {

                }
            });


        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void dialogData() {
        HashMap<Integer, Object> buttonMap = new HashMap<Integer, Object>();
        buttonMap.put(1, R.string.btn_ok);
//        buttonMap.put(2, R.string.btn_settings);
        DialogView exitDialog = new DialogView(this, R.string.dialog_title, R.string.permission_string_data, R.drawable.information, buttonMap);
        exitDialog.setOnDialogButtonClick(new OnDialogButtonClick() {
            @Override
            public void onDialogButtonClick(View view) {
                switch (view.getId()) {
                    case 1:
                        finish();
                        break;
//                    case 2:
//                        Intent intent = new Intent(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);
//                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//                        Uri uri = Uri.fromParts("package", getPackageName(), null);
//                        intent.setData(uri);
//                        startActivity(intent);
//                        break;

                }

            }
        });
        exitDialog.show();
    }

    @Override
    public void onStart() {
        super.onStart();
        try {
            App.getContext().onStartActivity(this);
        }catch (Exception e){
            e.printStackTrace();
        }

    }

    @Override
    public void onStop() {
        super.onStop();
        App.getContext().onStartActivity(this);
    }

    @Override
    protected void attachBaseContext(Context context) {
        super.attachBaseContext(LanguageContextWrapper.wrap(context, AppPreference.getString(context, KEY.LANGUAGE, AppSettings.DEFAULT_LANGUAGE)));
    }


}
