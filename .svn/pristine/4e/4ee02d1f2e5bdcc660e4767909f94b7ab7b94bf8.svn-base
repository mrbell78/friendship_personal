package ngo.friendship.satellite.ui.product_management.activity;

import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Message;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import java.util.ArrayList;
import java.util.HashMap;

import ngo.friendship.satellite.App;
import ngo.friendship.satellite.R;
import ngo.friendship.satellite.asynctask.CommiunicationTask;
import ngo.friendship.satellite.asynctask.TaskKey;
import ngo.friendship.satellite.communication.RequestData;
import ngo.friendship.satellite.communication.ResponseData;
import ngo.friendship.satellite.constants.ActivityDataKey;
import ngo.friendship.satellite.constants.Constants;
import ngo.friendship.satellite.constants.RequestName;
import ngo.friendship.satellite.constants.RequestType;
import ngo.friendship.satellite.databinding.ActivityAdjustmentOpenBinding;
import ngo.friendship.satellite.error.MhealthException;
import ngo.friendship.satellite.interfaces.OnCompleteListener;
import ngo.friendship.satellite.interfaces.OnDialogButtonClick;
import ngo.friendship.satellite.jsonoperation.JSONParser;
import ngo.friendship.satellite.model.RequisitionInfo;
import ngo.friendship.satellite.ui.my_service.ServicesFragment;
import ngo.friendship.satellite.utility.SystemUtility;
import ngo.friendship.satellite.utility.TextUtility;
import ngo.friendship.satellite.views.AppToast;
import ngo.friendship.satellite.views.DialogView;

public class AdjustmentOpenActivity extends AppCompatActivity implements View.OnClickListener{
    ActivityAdjustmentOpenBinding binding;
    LinearLayout llRowContainer;
    ProgressDialog dlog;
    String activityPath;
    ArrayList<RequisitionInfo> requisitionList;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityAdjustmentOpenBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        getSupportActionBar().setTitle("Stock Adjust");

        requisitionList = App.getContext().getDB().getLast7Requisition();
        llRowContainer = findViewById(R.id.ll_requisition_row_container);
        showData();
//        fillExampleList();
//        setUpRecyclerView();
//        binding.proAdjust.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
////                binding.openText.setVisibility(View.VISIBLE);
////                binding.closedText.setVisibility(View.GONE);
//                binding.fabProductStock.setVisibility(View.GONE);
//                binding.floatingActionButton3.setVisibility(View.VISIBLE);
//            }
//        });

//        binding.openText.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//                Intent i = new Intent(AdjustmentOpenActivity.this, AdjudtmentOpenItemsActivity.class);
//                startActivity(i);
//            }
//        });

//        binding.adjustReturn.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//                Intent i = new Intent(AdjustmentOpenActivity.this, StockReturnActivity.class);
//                startActivity(i);
//            }
//        });
//
//        binding.adjustDamages.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//                Intent i = new Intent(AdjustmentOpenActivity.this, ProductDamagesActivity.class);
//                startActivity(i);
//            }
//        });
//        binding.closedText.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//                Intent i = new Intent(AdjustmentOpenActivity.this, AdjudtmentOpenItemsActivity.class);
//                startActivity(i);
//            }
//        });


        binding.fabProductStock.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                startActivity(new Intent(getApplicationContext(), ProductAdjustmentActivity.class));
            }
        });
        binding.bottomNavigationView.setOnItemSelectedListener(item -> {
            int id = item.getItemId();
            // NavController navController = Navigation.findNavController(this, R.id.navHostFragment);
            switch (id) {
                case R.id.nav_bottom_my_service:
                    getSupportFragmentManager().beginTransaction().replace(R.id.fragmentContainer, ServicesFragment.Companion.newInstance()).commit();
                    item.setChecked(true);
//                    Intent dataActivity = new Intent(MainActivity.this, MyServiceActivity.class);
//                    startActivity(dataActivity);
//                    //  getSupportFragmentManager().beginTransaction().replace(R.id.fragmentContainer, Myser.newInstance()).commit();
//                    item.setChecked(true);
//                    binding.appBarMain.contentMain.btnHome.setImageResource(R.drawable.ic_home);
//                    binding.appBarMain.contentMain.tvHome.setTextColor(getResources().getColor(R.color.ash_gray));
                    return true;
                case R.id.nav_product_rise:
                    startActivity(new Intent(this, ProductsHomeActivity.class));

                    return true;
                case R.id.nav_product_adjust:

                    startActivity(new Intent(this, ProductAdjustmentActivity.class));
                    return true;
                //check id
            }
            return true;
        });


    }


    private void showData() {
        llRowContainer.removeAllViews();
        if(requisitionList == null || requisitionList.size()==0)
        {
            AppToast.showToast(this, R.string.data_not_available);
            return;
        }

        for(int i=0;i<requisitionList.size();i++)
        {
            View view = View.inflate(this, R.layout.requisition_list_row, null);
            llRowContainer.addView(view);

            RequisitionInfo requisitionInfo = requisitionList.get(i);
            TextView tvDate = view.findViewById(R.id.tv_date);
            tvDate.setText(requisitionInfo.getRequisitionDate());

            TextView reqNo = view.findViewById(R.id.tv_req_no);
            reqNo.setText(requisitionInfo.getRequisitionNo()+"");

            TextView tvRequisitionPrice = view.findViewById(R.id.tv_requisition_price);
            tvRequisitionPrice.setText(TextUtility.format("%.2f", requisitionInfo.getRequisitionMedicinePrice()));

            TextView tvReceivePrice  = view.findViewById(R.id.tv_receive_price);
            tvReceivePrice.setText(TextUtility.format("%.2f",requisitionInfo.getReceiveMedicinePrice()));

            view.setTag(i);
            view.setOnClickListener(this);
        }
    }
    private void showDataRetrieveConfirmationPrompt(String msg) {
        HashMap<Integer ,Object> buttonMap =new HashMap<Integer, Object>();
        buttonMap.put(1, R.string.btn_yes);
        buttonMap.put(2, R.string.btn_no);
        DialogView dialog= new DialogView(this,R.string.dialog_title,msg, R.drawable.information, buttonMap);
        dialog.setOnDialogButtonClick(new OnDialogButtonClick() {

            @Override
            public void onDialogButtonClick(View view) {
                switch (view.getId()) {
                    case 1:
                        retrieveRequisitionList();
                        break;
                }

            }
        });
        dialog.show();
    }

    private void retrieveRequisitionList(){

        RequestData request =new RequestData(RequestType.STOCK_INVENTORY, RequestName.LAST7_REQUISITION, Constants.MODULE_DATA_GET);

        CommiunicationTask commiunicationTask= new CommiunicationTask(this, request,getResources().getString(R.string.retrieving_data), getResources().getString(R.string.please_wait));
        commiunicationTask.setCompleteListener(new OnCompleteListener() {
            @Override
            public void onComplete(Message msg) {
                if (msg.getData().containsKey(TaskKey.ERROR_MSG)) {
                    showOneButtonDialog(getResources().getString(R.string.network_error)+"\n"+msg.getData().getString(TaskKey.ERROR_MSG), R.drawable.error, Color.RED);
                } else {
                    ResponseData response=(ResponseData) msg.getData().getSerializable(TaskKey.DATA0);
                    if(response.getResponseCode().equalsIgnoreCase("00")){
                        showOneButtonDialog(response.getErrorCode()+"-"+response.getErrorDesc(), R.drawable.error, Color.RED);
                    }else{

                        try {
                            ArrayList<RequisitionInfo> requisitionList = JSONParser.pasreRequisitionListJSON(response.getData());
                            App.getContext().getDB().saveRequisitionList(requisitionList, App.getContext().getUserInfo().getUserId());
                            AdjustmentOpenActivity.this.requisitionList = App.getContext().getDB().getLast7Requisition();

                        } catch (MhealthException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        showData();
                    }
                }

            }
        });
        commiunicationTask.execute();
    }

    @Override
    public void onClick(View v) {

        if(v.getTag() != null)
        {
            int rowIndex = (Integer) v.getTag();
            Intent intent = new Intent(this, RequisitionDetailActivity.class);
            intent.putExtra(ActivityDataKey.REQUISITION_ID, requisitionList.get(rowIndex).getRequisitionId());
            intent.putExtra(ActivityDataKey.REQUISITION_NO, requisitionList.get(rowIndex).getRequisitionNo());
            intent.putExtra(ActivityDataKey.ACTIVITY_PATH, activityPath);
            startActivity(intent);
            return;
        }

        switch (v.getId()) {
            case R.id.btn_close:
                finish();
                break;
            case R.id.btn_retrieve_data:
                if(SystemUtility.isConnectedToInternet(this))
                {

                    showDataRetrieveConfirmationPrompt(getResources().getString(R.string.retrieve_data_confirmation));
                }
                else
                    SystemUtility.openInternetSettingsActivity(this);
                break;
            default:
                break;
        }
    }

    private void showOneButtonDialog(String msg, final int imageId, int messageColor){

        HashMap<Integer, Object> buttonMap = new HashMap<Integer, Object>();
        buttonMap.put(1, R.string.btn_close);
        DialogView dialog = new DialogView(this, R.string.dialog_title, msg,messageColor, imageId, buttonMap);
        dialog.show();
    }


    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.common_menu, menu);
        return true;
    }


}


