package ngo.friendship.satellite.ui.earlier_services


import android.annotation.SuppressLint
import android.content.ContentValues.TAG
import android.content.Context
import android.content.Intent
import android.graphics.Color
import android.graphics.Typeface
import android.graphics.drawable.InsetDrawable
import android.os.Bundle
import android.text.Html
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.CompoundButton
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.DefaultItemAnimator
import androidx.recyclerview.widget.DividerItemDecoration
import androidx.recyclerview.widget.LinearLayoutManager
import com.google.gson.Gson
import ngo.friendship.satellite.App
import ngo.friendship.satellite.MainActivity
import ngo.friendship.satellite.R
import ngo.friendship.satellite.adapter.BasemHealthAdapter
import ngo.friendship.satellite.asynctask.MHealthTask
import ngo.friendship.satellite.asynctask.Task
import ngo.friendship.satellite.asynctask.TaskKey
import ngo.friendship.satellite.constants.ActivityDataKey
import ngo.friendship.satellite.constants.KEY
import ngo.friendship.satellite.databinding.CommonServicesItemRowBinding
import ngo.friendship.satellite.databinding.FragmentPendingSyncBinding
import ngo.friendship.satellite.error.MhealthException
import ngo.friendship.satellite.interfaces.FragmentCommunicator
import ngo.friendship.satellite.interfaces.OnDialogButtonClick
import ngo.friendship.satellite.jsonoperation.JSONParser
import ngo.friendship.satellite.model.InterviewInfoSyncUnsync
import ngo.friendship.satellite.model.Question
import ngo.friendship.satellite.model.QuestionList
import ngo.friendship.satellite.ui.InterviewActivity
import ngo.friendship.satellite.ui.beneficiary.profile.BeneficiaryProfileActivity
import ngo.friendship.satellite.utility.FileOperaion
import ngo.friendship.satellite.utility.SystemUtility
import ngo.friendship.satellite.utility.Utility
import ngo.friendship.satellite.views.DialogView
import org.json.JSONArray
import org.json.JSONObject
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.Locale
import kotlin.math.log


/**
 * @author Md.Yeasin Ali
 * @created 01th Oct 2022
 */
class PendingSyncServiceFragment : Fragment(), View.OnClickListener,
    CompoundButton.OnCheckedChangeListener, FragmentCommunicator {
    private lateinit var binding: FragmentPendingSyncBinding
    private lateinit var viewModel: EarlierServiceViewModel
    private var IS_SAVED = false
    var activityPath: String? = null
    var interviews: ArrayList<InterviewInfoSyncUnsync> = ArrayList()
    var mAdapter: BasemHealthAdapter<InterviewInfoSyncUnsync, CommonServicesItemRowBinding>? = null
    var communicator: FragmentCommunicator? = null
    var ctx: Context? = null

    val DATA_GET = 1
    val EXIT = 2
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentPendingSyncBinding.inflate(inflater, container, false)
        App.loadApplicationData(activity)

        viewModel = activity?.run {
            ViewModelProvider(this).get(EarlierServiceViewModel::class.java)
        } ?: throw Exception("Invalid Activity")

        if (arguments != null) {
            IS_SAVED = requireArguments().getBoolean("IS_SAVED", false)
            Log.d(TAG, "onCreateView: ........the is saved flag is ${IS_SAVED}")
        }

        if (IS_SAVED) {
            binding.llSelectAll.visibility = View.VISIBLE
        } else {
            binding.llSelectAll.visibility = View.GONE
        }

        itemAdapter

        retrieveInterview("")

        viewModel.selected.observe(requireActivity()) { item ->
            var filterInterviewList: ArrayList<InterviewInfoSyncUnsync> = ArrayList()
            if (item.length > 0) {
                for (single in interviews) {
                    if (single.benefName.lowercase()
                            .contains(item.lowercase(), ignoreCase = true)
                    ) {
                        filterInterviewList.add(single)
                    }
                }


                mAdapter?.addItems(filterInterviewList)

            } else {
                mAdapter?.addItems(interviews)
            }
            mAdapter!!.notifyDataSetChanged()
        }



        binding.cvCheckAll.setOnCheckedChangeListener { buttonView: CompoundButton?, isChecked: Boolean ->
            if (isChecked) {
                for (interviewInfo in interviews) {
                    interviewInfo.isSelected = true
                }
            } else {
                for (interviewInfo in interviews) {
                    interviewInfo.isSelected = false
                }
            }
            (ctx as EarlierServicesActivity?)!!.showInterview(selectedInterviewList)
            mAdapter!!.notifyDataSetChanged()
        }
        return binding.root
    }

    private fun retrieveInterview(data: String) {
        val tsk = MHealthTask(
            activity,
            Task.RETRIEVE_SAVED_INTERVIEW_LIST,
            R.string.retrieving_data,
            R.string.please_wait
        )
        val tasl = if (IS_SAVED) "N" else "Y"

        if(IS_SAVED){
            tsk.setParam( "N", data)
            tsk.setCompleteListener { msg ->
                if (msg.data.getString(TaskKey.NAME) == TaskKey.MHEALTH_TASK) {
                    if (msg.data.containsKey(TaskKey.ERROR_MSG)) {
                        val errorMsg = msg.data.getSerializable(TaskKey.ERROR_MSG) as String?
                        App.showMessageDisplayDialog(
                            activity,
                            resources.getString(R.string.saving_error),
                            R.drawable.error,
                            Color.RED
                        )
                    } else {
                        interviews = msg.data.getSerializable(TaskKey.DATA0) as ArrayList<InterviewInfoSyncUnsync>
                        tsk.setParam("NR", data)
                        tsk.setCompleteListener { msg ->
                            if (msg.data.getString(TaskKey.NAME) == TaskKey.MHEALTH_TASK) {
                                if (msg.data.containsKey(TaskKey.ERROR_MSG)) {
                                    val errorMsg = msg.data.getSerializable(TaskKey.ERROR_MSG) as String?
                                    App.showMessageDisplayDialog(
                                        activity,
                                        resources.getString(R.string.saving_error),
                                        R.drawable.error,
                                        Color.RED
                                    )
                                } else {
                                    interviews.addAll(msg.data.getSerializable(TaskKey.DATA0) as ArrayList<InterviewInfoSyncUnsync>)
                                    if (interviews.size > 0) {
                                        binding.serviceItemNotFound.serviceNotFound.visibility = View.GONE
                                        binding.cvCheckAll.visibility = View.VISIBLE
                                    } else {
                                        binding.serviceItemNotFound.serviceNotFound.visibility = View.VISIBLE
                                    }
                                    if (!IS_SAVED) {
                                        binding.llSelectAll.visibility = View.GONE
                                    }

                                    if (IS_SAVED && interviews.size > 0) {
                                        binding.llSelectAll.visibility = View.VISIBLE
                                    } else {
                                        binding.llSelectAll.visibility = View.GONE
                                    }

                                    mAdapter!!.addItems(interviews)
                                    (ctx as EarlierServicesActivity?)!!.showInterview(selectedInterviewList)
                                    Log.e("Inviews", "" + interviews.size)
                                }
                            }
                        }
                        tsk.execute()


//                    if (interviews.size > 0) {
//                        binding.serviceItemNotFound.serviceNotFound.visibility = View.GONE
//                        binding.cvCheckAll.visibility = View.VISIBLE
//                    } else {
//                        binding.serviceItemNotFound.serviceNotFound.visibility = View.VISIBLE
//                    }
//                    if (!IS_SAVED) {
//                        binding.llSelectAll.visibility = View.GONE
//                    }
//
//                    if (IS_SAVED && interviews.size > 0) {
//                        binding.llSelectAll.visibility = View.VISIBLE
//                    } else {
//                        binding.llSelectAll.visibility = View.GONE
//                    }

//                    mAdapter!!.addItems(interviews)
//                    (ctx as EarlierServicesActivity?)!!.showInterview(selectedInterviewList)
//                    Log.e("Inviews", "" + interviews.size)
                    }
                }
            }
            tsk.execute()
        }else{
            tsk.setParam( "Y", data)
            tsk.setCompleteListener { msg ->
                if (msg.data.getString(TaskKey.NAME) == TaskKey.MHEALTH_TASK) {
                    if (msg.data.containsKey(TaskKey.ERROR_MSG)) {
                        val errorMsg = msg.data.getSerializable(TaskKey.ERROR_MSG) as String?
                        App.showMessageDisplayDialog(
                            activity,
                            resources.getString(R.string.saving_error),
                            R.drawable.error,
                            Color.RED
                        )
                    } else {
                        interviews = msg.data.getSerializable(TaskKey.DATA0) as ArrayList<InterviewInfoSyncUnsync>

                    if (interviews.size > 0) {
                        binding.serviceItemNotFound.serviceNotFound.visibility = View.GONE
                        binding.cvCheckAll.visibility = View.VISIBLE
                    } else {
                        binding.serviceItemNotFound.serviceNotFound.visibility = View.VISIBLE
                    }
                    if (!IS_SAVED) {
                        binding.llSelectAll.visibility = View.GONE
                    }

                    if (IS_SAVED && interviews.size > 0) {
                        binding.llSelectAll.visibility = View.VISIBLE
                    } else {
                        binding.llSelectAll.visibility = View.GONE
                    }

                    mAdapter!!.addItems(interviews)
                    (ctx as EarlierServicesActivity?)!!.showInterview(selectedInterviewList)
                    Log.e("Inviews", "" + interviews.size)
                    }
                }
            }
            tsk.execute()
        }


    }

    private val itemAdapter: Unit
        private get() {
            mAdapter =
                object : BasemHealthAdapter<InterviewInfoSyncUnsync, CommonServicesItemRowBinding>() {
                    override fun onItemLongClick(
                        view: View,
                        model: InterviewInfoSyncUnsync,
                        position: Int
                    ) {
                    }

                    override fun onItemClick(
                        view: View,
                        savedInterviewInfo: InterviewInfoSyncUnsync,
                        position: Int,
                        dataBinding: CommonServicesItemRowBinding
                    ) {
                        //   openQuestionnair(position);
                    }

                    @SuppressLint("SetTextI18n")
                    override fun onBindData(
                        model: InterviewInfoSyncUnsync,
                        position: Int,
                        dataBinding: CommonServicesItemRowBinding
                    ) {

//                        var tempDrawable = ContextCompat.getDrawable(
//                            requireContext(),
//                            ngo.friendship.satellite.R.drawable.card_shape
//                        )
//                        val bubble = tempDrawable as LayerDrawable //; (cast to root element in xml)
//
//                        val solidColor =
//                            bubble.findDrawableByLayerId(ngo.friendship.satellite.R.id.outerRectangle) as GradientDrawable
//                        solidColor.setColor(resources.getColor(ngo.friendship.satellite.R.color.black))
//                        dataBinding.ivLable.setBackgroundDrawable(tempDrawable);

                        //activity!!.resources.getDrawable(ngo.friendship.satellite.R.drawable.card_shape) as GradientDrawable

                        dataBinding.llFollowUp.visibility = View.GONE
                        dataBinding.mdiLabelIcon.visibility =View.GONE
                        dataBinding.tvAgeGender.visibility =View.GONE
                        dataBinding.btnProfile.visibility =View.VISIBLE
                        dataBinding.tvBenefNameOthers.visibility =View.VISIBLE
                        dataBinding.btnProfile.setOnClickListener {
                            val profileString = Gson().toJson(model).toString()
                            val fcmProfile = Intent(ctx, BeneficiaryProfileActivity::class.java)
                            fcmProfile.putExtra("BENEF_PROFILE_FROM_INTERVIEW_LIST", profileString)
                            ctx!!.startActivity(fcmProfile)
                        }
//                       var icon:String = model.questionnaireIcon;
//                        if (!icon.isEmpty()){
//                            dataBinding.mdiLabelIcon.visibility =View.VISIBLE
//                            dataBinding.mdiLabelIcon.setText(Html.fromHtml("&#xF0415"))
//                        }else{
//                            dataBinding.mdiLabelIcon.visibility =View.GONE
//                        }
                        if (model.docFollowupId>0){
                            dataBinding.mdiLabelIcon.visibility =View.VISIBLE
                            dataBinding.mdiLabelIcon.setText(Html.fromHtml("&#xF04D9"))
                        }
                       try {
                           val benefCode = model.beneficiaryCode!!.takeLast(5)
                           dataBinding.tvBeneficiaryCode.setText(""+benefCode)
                       }catch (e:Exception){}

                        dataBinding.tvVisited.visibility = View.VISIBLE
                        dataBinding.tvVisited.text = "Time : " + model.interviewTime


                        if (!model.beneficiarGender.isNullOrEmpty()) {
                            var genderName:String = "";
                            if ( model.beneficiarGender.equals("M",ignoreCase = true)){
                                genderName = "Male"
                            }else if ( model.beneficiarGender.equals("F",ignoreCase = true)){
                                genderName = "Female"

                            }else if ( model.beneficiarGender.equals("O",ignoreCase = true)){
                                genderName = "Others"
                            }

                            if (model.age.contains('y')){
                                dataBinding.tvBenefNameOthers.text = "  $genderName, " + "${model.age} "
                            }else{
                                dataBinding.tvBenefNameOthers.text =  "  $genderName, " + "${model.age}y "
                            }

                            //dataBinding.tvBenefNameOthers.setText("("+model.beneficiarGender+")")
                        } else {
                            dataBinding.tvBenefNameOthers.setText("")
                        }
                        if (FileOperaion.isExist(model.benefImagePath)) {
                            try {
                                dataBinding.ivBeneficiary.setImageBitmap(
                                    FileOperaion.decodeImageFile(
                                        model.benefImagePath,
                                        60
                                    )
                                )
                            } catch (e: java.lang.Exception) {
                                e.printStackTrace()
                            }
                        } else {
                            try {
                                if (model.beneficiarGender.equals("F", ignoreCase = true)) {
                                    dataBinding.ivBeneficiary.setImageResource(R.drawable.ic_default_woman)
                                } else if (model.beneficiarGender.equals("M", ignoreCase = true)) {
                                    dataBinding.ivBeneficiary.setImageResource(R.drawable.ic_default_man)
                                }
                            } catch (e: java.lang.Exception) {
                                e.printStackTrace()
                            }
                        }
                        val value = JSONParser.getFcmConfigValue(
                            App.getContext().appSettings.fcmConfigrationJsonArray,
                            "INTERVIEW_SERVICES",
                            "time.limit.interview.edit.in.minute"
                        )

                        Log.d(TAG, "onBindData: ...........the config value is ${value}")
                        val timeConstrain: Int = value.toInt();
                        if(IS_SAVED){
                            dataBinding.llEditTime.setVisibility(View.GONE)
//                            val hour:String = String.format("%.2f", getTimeDifferenec(model).toDouble());
//                            dataBinding.tvTimeRemaining.setText("${hour} Hour Elapsed")
                        }else{
                            if (getTimeDifferenec(model).toDouble()<=timeConstrain/60) {
                                dataBinding.llEditTime.setVisibility(View.VISIBLE)
                                val hour:String = String.format("%.2f", getTimeDifferenec(model).toDouble());
                                dataBinding.tvTimeRemaining.setText("${hour} Hour Elapsed")

                            }
                        }




                        if(IS_SAVED){


                            Log.d("sentDatas", "onBindData: .......sent stats "+App.getContext().getDB().getInterViewServerStatus(interviews.get(position).interviewId))
                            if(App.getContext().getDB().getInterViewServerStatus(interviews.get(position).interviewId).equals("NR")){
                                dataBinding.mdiDelete.visibility= View.GONE
                            }else{
                                dataBinding.mdiDelete.visibility= View.VISIBLE
                                dataBinding.mdiDelete.setOnClickListener { v: View? ->
                                    showConfirmationDialog(getString(R.string.are_you_sure_are_you_want_to_delete_this_service),DATA_GET,model,position);
                                }
                            }
                        }

                        dataBinding.clServiceBody.setOnClickListener { v: View? ->
                            if(IS_SAVED && App.getContext().getDB().getInterViewServerStatus(interviews.get(position).interviewId)!=null && App.getContext().getDB().getInterViewServerStatus(interviews.get(position).interviewId).equals("N")){
                                editInterView(model,"local")
                            }else{
                                if (getTimeDifferenec(model).toDouble()<=timeConstrain/60) {
//                                dataBinding.llEditTime.setVisibility(View.VISIBLE)
//                                dataBinding.tvTimeRemaining.setText("${getTimeDifferenec(model).toInt()}elapsed")
                                    editInterView(model,"remote")
                                }else{
                                    dataBinding.llEditTime.setVisibility(View.GONE)
                                }
                            }
                        }
                        if (model.isNewDate()) {
                            dataBinding.tvDate.setVisibility(View.VISIBLE)
                            val inputDateFormat = SimpleDateFormat("dd-MM-yyyy", Locale.ENGLISH)
                            val outputDateFormat = SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH)
                            try {
                                val dateS = inputDateFormat.parse(model.date)
                                val formattedDate = outputDateFormat.format(dateS)

                                dataBinding.tvDate.setText(""+formattedDate)
                            } catch (e: Exception) {
                                dataBinding.tvDate.setText(""+model.date)
                                println("Error parsing or formatting date: ${e.message}")
                            }


                        } else {
                            dataBinding.tvDate.setVisibility(View.GONE)
                            dataBinding.tvDate.setText("")
                        }
                        if (IS_SAVED) {
                           dataBinding.cvCheck.visibility = View.VISIBLE
                        } else {
                            dataBinding.cvCheck.visibility = View.GONE
                        }
                        dataBinding.tvBenefName.text = "" + model.benefName
//                        Utility.setGenter(
//                            model.beneficiarGender,
//                            model.beneficiarAge,
//                            dataBinding.tvAgeGender,
//                            ctx
//                        )
//
//                        dataBinding.tvBeneficiaryCode.text =
//                            "" + model.beneficiaryCode.substring(model.beneficiaryCode.length - 5)
                        dataBinding.tvServiceType.visibility = View.VISIBLE
                        dataBinding.tvServiceType.setTypeface( dataBinding.tvServiceType.getTypeface(), Typeface.BOLD_ITALIC)
                        dataBinding.tvServiceType.text = "" + model.questionnarieTitle
//                        dataBinding.tvDateTime.text = "" + model.time + ", " + "" + model.date
                        if (model.isSelected) {
                            dataBinding.cvCheck.isChecked = true
                        } else {
                            dataBinding.cvCheck.isChecked = false
                        }
                        dataBinding.cvCheck.setOnCheckedChangeListener { buttonView, isChecked ->
                            if (isChecked) {
                                model.isSelected = true
                            } else {
                                model.isSelected = false
                            }
                            (ctx as EarlierServicesActivity?)!!.showInterview(selectedInterviewList)
                        }
                        //                }
                      //  dataBinding.clServiceBody.setOnClickListener { v: View? -> }
//                        Utility.setGenter(
//                            model.beneficiarGender,
//                            model.beneficiarAge,
//                            dataBinding.tvAgeGender,
//                            activity
//                        )
                        Utility.setDefaultImage(
                            model.beneficiarGender,
                            model.benefImagePath,
                            dataBinding.ivBeneficiary
                        )
//                dataBinding.tvQuestionnaireIcon.setText("");
//                dataBinding.tvQuestionnaireTitle.setText("" + model.getQuestionnaireTitle());
                    }

                    override val layoutResId: Int
                        get() = R.layout.common_services_item_row
                }
            val ATTRS = intArrayOf(android.R.attr.listDivider)
            val a = requireActivity().obtainStyledAttributes(ATTRS)
            val divider = a.getDrawable(0)
            val insetDivider = InsetDrawable(divider, 8, 16, 8, 16)
            a.recycle()
            val itemDecoration = DividerItemDecoration(activity, DividerItemDecoration.VERTICAL)
            itemDecoration.setDrawable(insetDivider)
            binding.rvService.addItemDecoration(itemDecoration)
            binding.rvService.setHasFixedSize(true)
            val mLayoutManager = LinearLayoutManager(activity)
            binding.rvService.layoutManager = mLayoutManager
            binding.rvService.itemAnimator = DefaultItemAnimator()
            binding.rvService.adapter = mAdapter
        }

    private fun showConfirmationDialog(msg: String,  type: Int,info: InterviewInfoSyncUnsync,position:Int) {
        val buttonMap = java.util.HashMap<Int, Any>()
        buttonMap[1] = R.string.btn_yes
        buttonMap[2] = R.string.btn_no
        val dialog = DialogView(activity, R.string.dialog_title, msg, R.drawable.warning, buttonMap)
        dialog.setOnDialogButtonClick(object : OnDialogButtonClick {
            override fun onDialogButtonClick(view: View?) {

                when (view!!.id) {
                   1 -> if (type == MainActivity.DATA_GET) {

                        deleteInterView(info,position);
                    } else if (type == MainActivity.EXIT) {
                        activity?.finish()
                    }
                }
            }
        })
        dialog.show()
    }

    private fun getTimeDifferenec(info: InterviewInfoSyncUnsync): String {

        val dateFormat = SimpleDateFormat("HH", Locale.getDefault())
        val currentTimeMillis: Long = System.currentTimeMillis()
        val timeDifferenceMillis: Long =   currentTimeMillis-info.createDate


        val doubleTimedifference = timeDifferenceMillis.toDouble()
        val seconds: Double = doubleTimedifference / 1000.00
        val minutes:Double = seconds / 60.00
        val hours:Double = String.format("%.3f", minutes).toDouble() / 60.00


        return hours.toString();

//        if(hour.toInt()>=24){
//            return false
//        }else return true

    }


    val selectedInterviewList: ArrayList<InterviewInfoSyncUnsync>
        get() {
            val selectedInterviewList = ArrayList<InterviewInfoSyncUnsync>()
            for (info in interviews) {
                if (info.isSelected) {
                    selectedInterviewList.add(info)
                }
            }
            Log.e("SELECTED INTERVIEW ", selectedInterviewList.toString())
            return selectedInterviewList
        }

    fun editInterView(info: InterviewInfoSyncUnsync,server:String) {

        var jsonStr: String? = ""
        val questionnaireInfo = App.getContext().db.getQuestionnaire(info.questionnaireId)
        if (questionnaireInfo != null) {
            var medicine  = info.questionAnswerJson;
            Log.d(TAG, "editInterView: .....${info.prescribedMedicine}")
            jsonStr = questionnaireInfo.getQuestionnaireJSON(activity)
            jsonStr = JSONParser.preapreQuestionearWithAns(jsonStr, info.questionAnswerJson)
            val entryParams = ArrayList<String>()
            entryParams.add(info.householdNumber)
            val intent = Intent(activity, InterviewActivity::class.java)
            intent.putExtra(ActivityDataKey.QUESTIONNAIRE_JSON, jsonStr)
            intent.putExtra(ActivityDataKey.BENEFICIARY_CODE, info.beneficiaryCode)
            intent.putExtra(ActivityDataKey.BENEFICIARY_ID, info.beneficiaryId)
            intent.putExtra(ActivityDataKey.PARENT_INTERVIEW_ID, info.parentInterviewId)
            intent.putExtra(ActivityDataKey.PARAMS, entryParams)
            intent.putExtra(ActivityDataKey.INTERVIEW_TYPE, ActivityDataKey.UPDATE)
            intent.putExtra(ActivityDataKey.TRANS_REF, info.transRef)
            intent.putExtra("EDIT", true)
            intent.putExtra("server", server)
            startActivity(intent)
        }
    }


    fun deleteInterView(info: InterviewInfoSyncUnsync,position:Int) {

       // val ansMap: Map<String, String> = HashMap()
        var ansMap : HashMap<String, String> = HashMap<String, String> ()
        var jsonStr: String? = ""
        val questionnaireInfo = App.getContext().db.getQuestionnaire(info.questionnaireId)
        if (questionnaireInfo != null) {
            jsonStr = questionnaireInfo.getQuestionnaireJSON(activity)
            jsonStr = JSONParser.preapreQuestionearWithAns(jsonStr, info.questionAnswerJson)
            val entryParams = ArrayList<String>()
            entryParams.add(info.householdNumber)
        }
        var currentQuestion: Question? = null
        var qList: QuestionList? = null
        var currentQuestionList: QuestionList? = null
        try {
            qList = JSONParser.parseQuestionListJSON(jsonStr)
        } catch (e: MhealthException) {
            // TODO Auto-generated catch block
            e.printStackTrace()
        }

        if (qList != null) {
            val jObj = JSONObject(jsonStr)
            val jDataObj: JSONObject = jObj.getJSONObject("QUESTIONNAIRE_DATA")
            val jQuetionnaireObj = jDataObj.getJSONObject(KEY.QUESTIONNAIRE)
            val keyList = jQuetionnaireObj.keys()

            var medicinedata:String=""
            val ansList: JSONArray = JSONObject(info.questionAnswerJson).getJSONArray("questions")
            val sb = StringBuilder()

            sb.append("[")
            for (i in 0 until ansList.length()) {
//                ansMap.put(
//                    "medicine" + ansList.getJSONObject(i).getString("qkey"),
//                    ansList.getJSONObject(i).getString("answer")
//                )

                if(ansList.getJSONObject(i).getString("qkey").equals("4")){
                    val medicineJson:String = ansList.getJSONObject(i).getString("answer")

                    medicinedata  = medicineJson.replace("|",",")
                    sb.append(medicinedata)

                  //  Log.d("jsonData", "deleteInterView: ..."+sb)
                }

            }
            sb.append("]")
            val mList:JSONArray = JSONArray(sb.toString())
            for (i in 0 until mList.length()) {
                val jsonDosesObject: JSONObject = mList.getJSONObject(i)
                val medicineId = JSONParser.getString(jsonDosesObject, "MED_ID")
                val medicineQuantity = JSONParser.getString(jsonDosesObject, "MED_QTY")

                val interviewStartTime:Long = Calendar.getInstance().timeInMillis
//                App.getContext().getDB().updateStockTable(
//                    medicineId.toLong(),
//                    info.userId.toLong(),
//                    medicineQuantity.toLong(),
//                    interviewStartTime
//                )

                Log.d("medicine", "deleteInterView: medicine id :" + medicineId +" quanttity is "+medicineQuantity)

            }

            App.getContext().getDB().deleteService(info.interviewId,info.userId,mList, Calendar.getInstance().timeInMillis.toInt())
            mAdapter?.removeItem(position)
            interviews.removeAt(position)
            if (IS_SAVED && interviews.size > 0) {
                binding.llSelectAll.visibility = View.VISIBLE
            } else {
                binding.llSelectAll.visibility = View.GONE
            }
            mAdapter!!.notifyDataSetChanged()
            (ctx as EarlierServicesActivity?)!!.tabCount()
        }
    }

    override fun onAttach(context: Context) {
        super.onAttach(context)
        ctx = context
    }

    override fun onResume() {
        super.onResume()
        if (App.getContext().appSettings == null) {
            App.getContext().readAppSettings(activity)
        }
        if (!SystemUtility.isAutoTimeEnabled(activity)) {
            SystemUtility.openDateTimeSettingsActivity(activity)
        }
        //        if(IS_SAVED){
//            activityPath= Utility.setActivityPath(getActivity(),R.string.saved_interview);
//        }else{
//            activityPath=Utility.setActivityPath(getActivity(),R.string.sent_interview);
//        }
    }

    override fun onClick(v: View) {}
    override fun onCheckedChanged(buttonView: CompoundButton, isChecked: Boolean) {}
    override fun passData(name: String?) {
        Toast.makeText(ctx, "" + name, Toast.LENGTH_SHORT).show()
    }

    companion object {
        fun newInstance(isSaved: Boolean): PendingSyncServiceFragment {
            val homePage = PendingSyncServiceFragment()
            val args = Bundle()
            args.putBoolean("IS_SAVED", isSaved)
            homePage.arguments = args
            return homePage
        }
    }
}